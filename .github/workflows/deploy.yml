# .github/workflows/deploy.yml

name: Deploy Python App to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 1. Checkout Code
      uses: actions/checkout@v4

    - name: 2. Setup SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: 3. Deploy to EC2 and Restart App
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

        rsync -avz --exclude '.git' --exclude '.github' --exclude 'venv' . ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:${{ secrets.DEPLOY_PATH }}

        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -e # Exit immediately if a command fails

          # Navigate to the deployment directory
          cd ${{ secrets.DEPLOY_PATH }}

          # === START: PYTHON VIRTUAL ENVIRONMENT SETUP ===
          if [ ! -d "venv" ]; then
            echo "Creating Python virtual environment..."
            python3 -m venv venv

            echo "Manually installing pip into virtualenv..."
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            ./venv/bin/python get-pip.py
          fi

          echo "Activating virtual environment and installing dependencies..."
          /pip install -r requirements.txt
          # === END: PYTHON VIRTUAL ENVIRONMENT SETUP ===


          # Kill any old running instance of the app.
          # We now target the python executable inside our venv for more accuracy.
          echo "Stopping old application process..."
          pkill -f "${{ secrets.DEPLOY_PATH }}/venv/bin/python app.py" || true

          # Start the application using the python from our virtual environment
          echo "Starting new application process..."
          nohup ./venv/bin/python app.py > output.log 2>&1 &

          echo "Deployment successful!"
        EOF